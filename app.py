import streamlit as st
import pandas as pd
import io
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet

st.title("üßÆ Calculadora de Cuotas Avanzada")

# Entradas del usuario
monto = st.number_input("üí∞ Monto del pr√©stamo", min_value=0.0, value=100000.0, step=1000.0, format="%0.0f")
tasa_anual = st.number_input("üìà Tasa de inter√©s anual (%)", min_value=0.0, value=12.0, step=0.1, format="%.2f")
plazo_total_meses = st.number_input("üìÖ Plazo total (en meses)", min_value=1, value=24, step=1)

frecuencia = st.selectbox(
    "üîÅ Frecuencia de pago",
    [
        "Diario", "Semanal", "Quincenal", "Mensual", "Bimensual", "Trimestral",
        "Cuatrimestral", "Semestral", "Anual", "Al vencimiento"
    ]
)

tipo_cuota = st.selectbox("üìä Tipo de cuota", ["Cuota nivelada", "Saldos insolutos"])

# Opci√≥n para seguro
incluir_seguro = st.checkbox("¬øIncluir seguro de pr√©stamo?", value=True)
if incluir_seguro:
    seguro_porcentaje = st.number_input("üõ°Ô∏è Porcentaje de seguro (%)", min_value=0.0, value=2.80, step=0.01, format="%.2f")
else:
    seguro_porcentaje = 0.0

if st.button("Calcular"):
    # Frecuencias y c√°lculos
    frecuencias = {
        "Diario": 360,
        "Semanal": 52,
        "Quincenal": 24,
        "Mensual": 12,
        "Bimensual": 6,
        "Trimestral": 4,
        "Cuatrimestral": 3,
        "Semestral": 2,
        "Anual": 1,
        "Al vencimiento": 1
    }

    pagos_por_a√±o = frecuencias[frecuencia]
    tasa_periodica = tasa_anual / 100 / pagos_por_a√±o
    plazo_en_pagos = int(plazo_total_meses * pagos_por_a√±o / 12)

    # Calcular cuota nivelada
    if tipo_cuota == "Cuota nivelada" and frecuencia != "Al vencimiento":
        cuota = monto * (tasa_periodica * (1 + tasa_periodica) ** plazo_en_pagos) / ((1 + tasa_periodica) ** plazo_en_pagos - 1)
    else:
        cuota = None

    saldo = monto
    tabla = []

    # Definimos el inicio del √∫ltimo a√±o para evitar cobrar seguro all√≠
    pagos_ultimo_ano = pagos_por_a√±o * 1  # n√∫mero de pagos en un a√±o
    inicio_ultimo_ano = plazo_en_pagos - pagos_ultimo_ano + 1  # primer periodo del √∫ltimo a√±o

    for i in range(1, plazo_en_pagos + 1):
        interes = saldo * tasa_periodica

        if frecuencia == "Al vencimiento":
            abono_capital = 0.0 if i < plazo_en_pagos else monto
            cuota_actual = interes if i < plazo_en_pagos else interes + monto
        elif tipo_cuota == "Cuota nivelada":
            abono_capital = cuota - interes
            cuota_actual = cuota
        else:
            abono_capital = monto / plazo_en_pagos
            cuota_actual = abono_capital + interes

        # Seguro se cobra s√≥lo en el inicio de cada a√±o (periodos m√∫ltiplos de pagos_por_a√±o + 1)
        # y nunca durante el √∫ltimo a√±o
        if incluir_seguro and (i % pagos_por_a√±o == 1) and (i < inicio_ultimo_ano):
            # El seguro se calcula sobre el saldo actual (al inicio de ese a√±o)
            seguro_base = saldo * (seguro_porcentaje / 100)
            impuesto = seguro_base * 0.15
            bomberos = seguro_base * 0.05
            papeleria = 50.0
            seguro_actual = seguro_base + impuesto + bomberos + papeleria
        else:
            seguro_actual = 0.0

        saldo -= abono_capital
        saldo = max(0.0, saldo)
        cuota_total = cuota_actual + seguro_actual

        tabla.append([
            i, cuota_actual, interes, abono_capital,
            seguro_actual, cuota_total, saldo
        ])

    df = pd.DataFrame(tabla, columns=[
        "Per√≠odo", "Cuota", "Inter√©s", "Abono a Capital",
        "Seguro", "Pago Total", "Saldo Restante"
    ])

    st.subheader("üìÑ Tabla de Amortizaci√≥n")
    st.dataframe(df.style.format({
        "Cuota": "L. {:,.2f}",
        "Inter√©s": "L. {:,.2f}",
        "Abono a Capital": "L. {:,.2f}",
        "Seguro": "L. {:,.2f}",
        "Pago Total": "L. {:,.2f}",
        "Saldo Restante": "L. {:,.2f}",
    }))

    seguro_cobrado = df["Seguro"].sum()
    st.subheader("üìä Resumen")
    st.write(f"üßæ Seguro total cobrado: **L. {seguro_cobrado:,.2f}**")
    if len(df) > 0:
        st.write(f"üì¶ Cuota inicial total (incluye seguro): **L. {df.iloc[0]['Pago Total']:,.2f}**")

    st.subheader("üìÅ Exportar o Imprimir")

    # Descargar Excel
    excel_buffer = io.BytesIO()
    with pd.ExcelWriter(excel_buffer, engine="xlsxwriter") as writer:
        df.to_excel(writer, sheet_name="Amortizaci√≥n", index=False)
    st.download_button(
        label="üì• Descargar en Excel",
        data=excel_buffer.getvalue(),
        file_name="tabla_amortizacion.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # Funci√≥n para PDF
    def generar_pdf(dataframe):
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        elements = []

        styles = getSampleStyleSheet()
        elements.append(Paragraph("Tabla de Amortizaci√≥n", styles['Title']))
        elements.append(Spacer(1, 12))

        table_data = [list(dataframe.columns)] + dataframe.round(2).values.tolist()
        table = Table(table_data, repeatRows=1)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.black)
        ]))
        elements.append(table)

        doc.build(elements)
        buffer.seek(0)
        return buffer

    pdf_data = generar_pdf(df)
    st.download_button(
        label="üìÑ Descargar en PDF",
        data=pdf_data,
        file_name="tabla_amortizacion.pdf",
        mime="application/pdf"
    )

    # Bot√≥n imprimir
    st.markdown("""
        <button onclick="window.print()" style="
            background-color:#4CAF50;
            color:white;
            padding:10px 20px;
            border:none;
            cursor:pointer;
            border-radius:5px;
            font-size:16px;
            margin-top:10px;
        ">üñ®Ô∏è Imprimir</button>
        """, unsafe_allow_html=True)

